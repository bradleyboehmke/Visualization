{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Histograms\"\nauthor: NULL\ndate: NULL\noutput:\n  html_document:\n    keep_md: true\n    fig_width: 4\n    fig_height: 3\n---\n\nHistograms are a useful way to look at the shape of a distribution of numerical data and are, typically, our first step in assessing normality. They are used by displaying the numeric values on the x-axis where the continuous variable is broken into intervals (aka bins) and the the y-axis represents the frequency or percent of observations that fall into that bin. Density plots provide a similar plot; however, the y-axis displays the probability of getting an x value.\n\n- [Replication requirements](#replication)\n- [Basic histogram & density plot](#basics)\n- [Comparing groups](#groups)\n- [Adding value markers](#markers)\n\n<br>\n\n## Relication Requirements {#replication}\nWe'll illustrate with the following data:\n\n```{r}\nset.seed(1234)\n\ndf <- data.frame(group = factor(rep(c(\"A\", \"B\"), each = 200)),\n                 rating = c(rnorm(200), rnorm(200, mean = .8)))\n```\n\nAlthough histograms can be produced quickly with base R functions and `ggplot2`'s `qplot()` function, for this tutorial I will demonstrate how to generate more refined histograms with `ggplot2`s full syntax.\n\n```{r}\nlibrary(ggplot2)\n```\n\n<br>\n\n## Basic Histogram & Density Plot {#basics}\nThe basic histogram assesses the frequency or count of individual x intervals. \n\n```{r, fig.align='center'}\n# default histogram\nggplot(df, aes(x = rating)) +\n        geom_histogram()\n\n# Change colors for better distinction and adjust bin width\nggplot(df, aes(x = rating)) +\n        geom_histogram(binwidth = .3, color = \"grey30\", fill = \"white\")\n```\n\nTo visualize the density of the distribution instead of the count:\n\n```{r, fig.align='center'}\n# default density plot\nggplot(df, aes(x = rating)) +\n        geom_density()\n\n# get the density histogram\nggplot(df, aes(x = rating)) +\n        geom_histogram(aes(y = ..density..), \n                     binwidth = .3, color = \"grey30\", fill = \"white\")\n\n# overlay the histogram & density plot\nggplot(df, aes(x = rating)) +\n        geom_histogram(aes(y = ..density..), \n                     binwidth = .3, color = \"grey30\", fill = \"white\") +\n        geom_density()\n\n# fill density overlay with transparent color\nggplot(df, aes(x = rating)) +\n        geom_histogram(aes(y = ..density..), \n                     binwidth = .3, color = \"grey30\", fill = \"white\") +\n        geom_density(alpha = .2, fill = \"antiquewhite3\")\n```\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Comparing Groups {#groups}\nOften, we want to compare the distributions of different groups within our data.  To compare the histograms and density plots of multiple groups we can do the following:\n\n```{r, fig.align='center'}\n# Overlaying histograms\nggplot(df, aes(x = rating, fill = group)) +\n        geom_histogram(binwidth = .3, alpha = .5, position = \"identity\")\n\n# Interweaving histograms\nggplot(df, aes(x = rating, fill = group)) +\n        geom_histogram(binwidth = .3, position = \"dodge\")\n\n# Overlaying density plots\nggplot(df, aes(x = rating, fill = group)) +\n        geom_density(alpha = .5)\n```\n\n\nWe can also separate the histograms by using facets:\n\n```{r, fig.align='center', fig.height=5, fig.width=5}\n# vertical faceting\nggplot(df, aes(x = rating)) +\n        geom_histogram(binwidth = .3, color = \"grey30\", fill = \"white\") +\n        facet_grid(group ~ .)\n```\n\n```{r, fig.align='center', fig.height=4, fig.width=6}\n# horizontal faceting\nggplot(df, aes(x = rating)) +\n        geom_histogram(binwidth = .3, color = \"grey30\", fill = \"white\") +\n        facet_grid(. ~ group)\n```\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Add Value Markers {#markers}\nWe can also add markers to indicate important values such as the mean or median:\n\n```{r, fig.align='center'}\n# Add mean line to single histogram\nggplot(df, aes(x = rating)) +\n        geom_histogram(binwidth = .3, color = \"grey30\", fill = \"white\") +\n        geom_vline(aes(xintercept = mean(rating, na.rm = TRUE)),\n                    color = \"red\", linetype = \"dashed\", size = 1)\n```\n\nTo add lines for grouped data we need to do a little computation prior to graphing.  Here we simple create a new data frame with the mean values for each group and use that data to plot the mean lines:\n\n```{r, fig.align='center', warning=FALSE, message=FALSE, fig.width=5}\nlibrary(dplyr)\n\n# calculate mean for each group\ndf_mean <- df %>%\n        group_by(group) %>%\n        summarise(Avg = mean(rating, na.rm = TRUE))\n\n# Add mean line to overlaid histograms\nggplot(df, aes(x = rating, fill = group)) +\n        geom_histogram(binwidth = .3, alpha = .5, position = \"identity\") +\n        geom_vline(data = df_mean, aes(xintercept = Avg, color = group),\n                   linetype = \"dashed\", size = 1)\n```\n\n```{r, fig.align='center', fig.height=4, fig.width=6}\n# Add mean line to faceted histograms\nggplot(df, aes(x = rating)) +\n        geom_histogram(binwidth = .3, color = \"grey30\", fill = \"white\") +\n        facet_grid(. ~ group) +\n        geom_vline(data = df_mean, aes(xintercept = Avg), \n                   linetype = \"dashed\", size = 1, color = \"red\")\n```\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n\n\n\n\n",
    "created" : 1463492180880.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "16661000",
    "id" : "F9E4DCAA",
    "lastKnownWriteTime" : 1463500123,
    "last_content_update" : 1463500123876,
    "path" : "~/Desktop/Personal/Visualization/Histogram.Rmd",
    "project_path" : "Histogram.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}