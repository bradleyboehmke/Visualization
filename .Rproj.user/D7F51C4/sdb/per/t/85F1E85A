{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Notebook\"\noutput:\n  html_document: default\n  html_notebook: default\n---\n\nA hybrid between a [bar chart](http://uc-r.github.io/barcharts) and a [Cleveland dot plot](http://uc-r.github.io/cleveland-dot-plots) is the lollipop chart. A lollipop chart typically contains categorical variables on the y-axis measured against a second (continuous) variable on the x-axis.  Similar to the Cleveland dot plot, the emphasis is on the dot to draw the readers attention to the specific x-axis value achieved by each category. The line is meant to be a minimalistic approach to easily tie each category to its relative point without drawing too much attention to the line itself. A lollipop chart is great for comparing multiple categories as it aids the reader in aligning categories to points but minimizes the amount of ink on the graphic. \n\n\n<img src=\"lollipop-icon.png\" style=\"display: block; margin: auto;\" />\n\n\n## tl;dr\nThis tutorial introduces the basics of the lollipop chart and compares them to bar charts and dot plots. I also show how to go from a basic lollipop chart to a more refined, publication worthy graphic. If you're short on time jump to the sections of interest:\n\n- [Replication requirements](#replication)\n- [Basic dot plot](#basics)\n- [Comparing multiple points of information](#groups)\n- [Adding value markers](#markers)\n- [Finishing touches](#finishing)\n\n<br>\n\n## Replication Requirements {#replication}\nTo reproduce the code throughout this tutorial you will need to load the following packages. The primary package of interest is [`ggplot2`](http://ggplot2.org/), which is a plotting system for R. You can build lollipop charts with base R graphics, but when I'm building more refined graphics I lean towards `ggplot2`. Note that I use the development version of ggplot2 which offers some nice title, subtitle, and caption options which I cover in the [last section](#finishing).  You can download the development version with this line of code: `devtools::install_github(\"hadley/ggplot2\")`\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE, collapse=TRUE}\nlibrary(dplyr)          # for data manipulation\nlibrary(ggplot2)        # for generating the visualizations\n```\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, collapse=TRUE}\nlibrary(gridExtra)\n```\n\nIn addition, throughout the tutorial I illustrate the graphics with the `midwest` data set provided in the `ggplot2` package.\n\n```{r, collapse=TRUE}\nhead(midwest)\n```\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Basic Lollipop Chart {#basics}\nMost readers would have little problem understanding either of the basic versions of the lollipop chart, dot plot or the bar chart. Consider if we want to view the top 25 counties in Ohio for percentage of college educated folks. After a little data manipulation (note that I order the counties by percent college educated (`percollege`) and then make the `county` variable a factor with the levels ordered accordingly; this will allow us to order the bars and dots in the following charts appropriately)...\n\n```{r, echo=TRUE, collapse=TRUE, message=FALSE}\nohio_top25 <- midwest %>%\n        filter(state == \"OH\") %>%\n        select(county, percollege) %>%\n        arrange(desc(percollege)) %>%\n        top_n(25) %>%\n        arrange(percollege) %>%\n        mutate(county = factor(county, levels = .$county))\n```\n\nWe could view the data as a horizontal bar chart...\n\n```{r, fig.align='center'}\n# bar chart\nggplot(ohio_top25, aes(county, percollege)) +\n        geom_bar(stat = \"identity\") +\n        coord_flip()\n```\n\nas a dot plot...\n```{r, fig.align='center'}\n# dot plot\nggplot(ohio_top25, aes(percollege, county)) +\n        geom_point()\n```\n\nor as a lollipop chart. In the lollipop chart we use `geom_segment` to plot the lines and we explicitly state that we want the lines to start at `x = 0` and extend to the `percollege` value with `xend = percollege`.  We simply need to include `y = county` and `yend = county` to tell R the lines are horizontally attached to each county. \n```{r, fig.align='center'}\n# lollipop chart\nggplot(ohio_top25, aes(percollege, county)) +\n         geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = \"grey50\") +\n        geom_point()\n```\n\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Comparing Multiple Points of Information {#groups}\nConsider the case where we want to compare counties in Ohio to see how they differ from the state average.  We have a couple of options to do this. First we could compare by mapping the `x = ` argument within `geom_segment` to the state average and then color the counties based on if they are above or below average.\n\n```{r, warning=FALSE, message=FALSE, fig.align='center', fig.height=11}\nohio <- midwest %>%\n        filter(state == \"OH\") %>%\n        select(county, percollege) %>%\n        arrange(percollege) %>%\n        mutate(Avg = mean(percollege, na.rm = TRUE),\n               Above = ifelse(percollege - Avg > 0, TRUE, FALSE),\n               county = factor(county, levels = .$county))\n\n\nggplot(ohio, aes(percollege, county, color = Above)) +\n         geom_segment(aes(x = Avg, y = county, xend = percollege, yend = county), color = \"grey50\") +\n        geom_point()\n```\n\n\nWe could correct this by joining the county and state variable; however, plottin all 75 counties in a single graph makes it difficult to compare state performance.  A more appropriate way to compare is to us facetting by county.\n\n\n```{r, eval=FALSE, warning=FALSE, message=FALSE}\ntop25\n\nggplot(top25, aes(percollege, county)) +\n         geom_segment(aes(x = 0, y = county, xend = percollege, yend = county), color = \"grey50\") +\n        geom_point() +\n        facet_wrap(~ state, scales = \"free_y\")\n```\n\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Adding Value Markers {#markers}\n\n\n\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Finishing Touches {#finishing}\n\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Wrapping Up\n\n\n\n<a href=\"#top\">Go to top</a>\n\n",
    "created" : 1471204641529.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2460759265",
    "id" : "85F1E85A",
    "lastKnownWriteTime" : 1471210291,
    "last_content_update" : 1471221835936,
    "path" : "~/Desktop/Personal/Visualization/Lollipop Chart/Lollipop.Rmd",
    "project_path" : "Lollipop Chart/Lollipop.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}