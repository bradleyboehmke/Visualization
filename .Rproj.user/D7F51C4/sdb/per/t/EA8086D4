{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Quick Plots\"\nauthor: NULL\ndate: NULL\noutput:\n  html_document:\n    keep_md: true\n    fig_width: 4\n    fig_height: 4\n---\n\nFor quick data exploration, base R plotting functions can provide an expeditious and straightforward approach to understanding your data. These functions are installed by default in base R and do not require additional visualization packages to be installed. This straightforward tutorial should teach you the basics, and give you a good idea of what you want to do next.  \n\nIn addition, I'll show how to make similar graphics with the `qplot()` function in `ggplot2`, which has a syntax similar to the base graphics functions. For each `qplot()` graph, there is also an equivalent using the more powerful `ggplot()` function which I illustrate in later visualization tutorials. This will, hopefully, help you transition to using `ggplot2` when you want to make more sophisticated graphics. \n\n<br>\n\n## tl;dr\nDon't have the time to scroll through the full tutorial?  Skip directly to the section of interest:\n\n- [Replication requirements](#replication)\n- [Scatter plot](#scatter)\n- [Line chart](#line)\n- [Bar chart](#bar)\n- [Histogram](#histogram)\n- [Box plot](#box)\n- [Stem & leaf plot](#stem)\n\n<br>\n\n## Replication Requirements {#replication}\nTo illustrate these quick plots I'll use several built in data sets that come with base R. R has 104 built in data sets that can be viewed with `data()`. The ones I'll use below include `mtcars`, `pressure`, `BOD`, and `faithful`. You can type these in your R console at anytime to see the data.  Also, in addition to base R plotting functions I illustrate how to use the `qplot()` function from the `ggplot2` package.\n\n```{r, eval=FALSE, collapse=TRUE}\n# data sets used\nmtcars\npressure\nBOD\nfaithful\n\n# package used\nlibrary(ggplot2)\n```\n\n&#9755; *See [Working with packages](http://bradleyboehmke.github.io/tutorials/basics/packages/) for more information on installing, loading, and getting help with packages.*\n\n```{r, message=FALSE, warning=FALSE, echo=FALSE}\nlibrary(ggplot2)\ntheme_update(plot.background = element_rect(fill = \"#fdfdfd\"))\n```\n\n<br>\n\n## Scatter Plot {#scatter}\nTo make a scatter plot use `plot()` with a vector of x values and a vector of y values:\n\n```{r, echo=TRUE, eval=FALSE}\n# base R\nplot(x = mtcars$wt, y = mtcars$mpg)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# base R\npar(bg = \"#fdfdfd\")\nplot(x = mtcars$wt, y = mtcars$mpg)\n```\n\nYou can get a similar result using `qplot()`:\n\n```{r, echo=TRUE, fig.align='center'}\nlibrary(ggplot2)\nqplot(x = mtcars$wt, y = mtcars$mpg)\n```\n\nIf the two vectors are already in the same data frame, note that the following functions produce the same outpt:\n\n```{r, echo=TRUE, eval=FALSE}\n\n# specifying only x and y vectors\nqplot(x = mtcars$wt, y = mtcars$mpg)\n\n# specifying x and y vectors from a data frame\nqplot(x = wt, y = mpg, data = mtcars)\n\n# using full ggplot syntax\nggplot(data = mtcars, aes(x = wt, y = mpg)) +\n        geom_point()\n```\n\nYou can also get a scatter plot matrix to observe several plots at once.  In this case you just pass the multiple variables (columns) in the data frame to `plot()` and a scatter plot matrix will be returned. The `qplot()` function does not have this same functionality; however, you can do more advanced plotting matrices by using `ggplot()`'s facetting arguments.  This will be covered in later tutorials.\n\n```{r, echo=TRUE, eval=FALSE}\n# passing multiple variables to plot\nplot(mtcars[, 4:6])\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# passing multiple variables to plot\npar(bg = \"#fdfdfd\")\nplot(mtcars[, 4:6])\n```\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Line Chart {#line}\nBy default the `plot()` function produces a scatter plot with dots. To make a line graph, pass it the vector of x and y values, and specify `type = \"l\"` for *line*:\n\n```{r, echo=TRUE, eval=FALSE}\nplot(x = pressure$temperature, y = pressure$pressure, type = \"l\")\n```\n\n```{r, echo=FALSE, fig.align='center'}\npar(bg = \"#fdfdfd\")\nplot(x = pressure$temperature, y = pressure$pressure, type = \"l\")\n```\n\nSimilarly, you can pass it the argument `type = \"s\"` to produce a stepped line chart:\n```{r, echo=TRUE, eval=FALSE}\nplot(x = pressure$temperature, y = pressure$pressure, type = \"s\")\n```\n\n```{r, echo=FALSE, fig.align='center'}\npar(bg = \"#fdfdfd\")\nplot(x = pressure$temperature, y = pressure$pressure, type = \"s\")\n```\n\nTo include multiple lines or to plot the points, first call `plot()` for the first line, then add additional lines and points with `lines()` and `points()` respectively: \n\n```{r, echo=TRUE, eval=FALSE}\n# base graphic\nplot(x = pressure$temperature, y = pressure$pressure, type = \"l\")\n\n# add points\npoints(x = pressure$temperature, y = pressure$pressure)\n\n# add second line in red color\nlines(x = pressure$temperature, y = pressure$pressure/2, col = \"red\")\n\n# add points to second line\npoints(x = pressure$temperature, y = pressure$pressure/2, col = \"red\")\n```\n\n```{r, echo=FALSE, fig.align='center'}\npar(bg = \"#fdfdfd\")\n# base graphic\nplot(x = pressure$temperature, y = pressure$pressure, type = \"l\")\n\n# add points\npoints(x = pressure$temperature, y = pressure$pressure)\n\n# add second line in red color\nlines(x = pressure$temperature, y = pressure$pressure/2, col = \"red\")\n\n# add points to second line\npoints(x = pressure$temperature, y = pressure$pressure/2, col = \"red\")\n```\n\nWe can use `qplot()` to get similar results by using the `geom` argument. `geom` means adding a geometric object (line, points, etc.) to visually represent the data and in this case we want to represent the data using a line and then also points:\n\n```{r, echo=TRUE, fig.align='center'}\n# using qplot for a line chart\nqplot(temperature, pressure, data = pressure, geom = \"line\")\n\n# using qplot for a stepped line chart\nqplot(temperature, pressure, data = pressure, geom = \"step\")\n\n# using qplot for a line chart with points\nqplot(temperature, pressure, data = pressure, geom = c(\"line\", \"point\"))\n```\n\nWe can get the same output using the full `ggplot()` syntax:\n```{r, echo=TRUE, eval=FALSE}\n# line chart\nggplot(pressure, aes(x = temperature, y = pressure)) +\n        geom_line()\n\n# step chart\nggplot(pressure, aes(x = temperature, y = pressure)) +\n        geom_step()\n\n# line chart with points\nggplot(pressure, aes(x = temperature, y = pressure)) +\n        geom_line() +\n        geom_point()\n```\n\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Bar Chart {#bar}\nTo make a bar chart of values, use `barplot()` and pass it a vector of values for the height of each bar and (optionally) a vector of labels for each bar. If the vector has names for the elements, the names will automatically be used as labels:\n\n```{r, echo=TRUE, eval=FALSE}\nbarplot(height = BOD$demand, names.arg = BOD$Time)\n```\n\n```{r, echo=FALSE, fig.align='center'}\npar(bg = \"#fdfdfd\")\nbarplot(height = BOD$demand, names.arg = BOD$Time)\n```\n\nWhen you want the bar chart to represent the *count* of cases in each category then you need to generate the count of unique values. For instance, in the `mtcars` dataset we may want to look at the cylinder variable and understand the distribution. To do this we can use the `table()` function which will provide us the count of each unique value in this variable.  We can then pass this to the `barplot()` function to plot the counts of cylinders:\n\n```{r, echo=TRUE, collapse=TRUE, eval=FALSE}\n# the cylinder variable in the mtcars dataset is made up of values of 4, 6 & 8\nmtcars$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n\n# get the count of 4, 6 & 8 cylinder cars in the dataset\ntable(mtcars$cyl)\n## \n##  4  6  8 \n## 11  7 14\n\n# plot the count of 4, 6 & 8 cylinder cars in the dataset\nbarplot(table(mtcars$cyl))\n```\n\n```{r, echo=FALSE, fig.align='center', collapse=TRUE}\n# plot the count of 4, 6 & 8 cylinder cars in the dataset\npar(bg = \"#fdfdfd\")\nbarplot(table(mtcars$cyl))\n```\n\nTo get the same result using `qplot()` we use `geom = \"bar\"`.\n\n```{r, echo=TRUE, fig.align='center'}\n# x defaults to a continuous variable\nqplot(mtcars$cyl, geom = \"bar\")\n```\n\nNote how the x axis defaults to a continuous variable in the plot above. Since bar charts are designed for categorical variables we want our x variable to a factor variable so that our x axis appropriately represents the data.  \n\n```{r, echo=TRUE, fig.align='center'}\n# use factor(x) to make it discrete\nqplot(factor(mtcars$cyl), geom = \"bar\")\n```\n\n&#9755; *See the [Factors](http://bradleyboehmke.github.io/tutorials/factors) tutorial for more information on categorical variables (aka factors) in R.*\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Histogram {#histogram}\nTo make a histogram, use `hist()` and pass it a single vector of values. You can also use the `breaks` argument to determine the size of the bins.\n\n```{r, echo=TRUE, eval=FALSE}\n# default bins\nhist(mtcars$mpg)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# default bins\npar(bg = \"#fdfdfd\")\nhist(mtcars$mpg)\n```\n\n```{r, echo=TRUE, eval=FALSE}\n# adjust binning\nhist(mtcars$mpg, breaks = 10)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# adjust binning\npar(bg = \"#fdfdfd\")\nhist(mtcars$mpg, breaks = 10)\n```\n\nTo get the same result using `qplot()` we don't need to specify a `geom` argument because when you feed `qplot()` with a single variable it will default to using a histogram. You can also control the binning by using the `binwidth` argument. Although not necessary I add the `color` argument to outline the bars.\n\n```{r, echo=TRUE, fig.align='center'}\nqplot(mtcars$mpg, binwidth = 3, color = I(\"white\"))\n```\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Box Plot {#box}\nTo make a box-whisker plot (aka box plot), use plot() and pass it x values that are categorical (aka factor) and a vector of y values. However, you need to ensure that the x values are factors otherwise you will get a scatter plot by default:\n\n```{r, echo=TRUE, eval=FALSE}\n# if x is not a factor it will produce a scatter plot\nplot(x = mtcars$cyl, y = mtcars$mpg)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# if x is not a factor it will produce a scatter plot\npar(bg = \"#fdfdfd\")\nplot(mtcars$cyl, mtcars$mpg)\n```\n\nWhen x is a [factor](http://bradleyboehmke.github.io/tutorials/factors) (as opposed to a numeric vector), it will automatically create a box plot:\n\n```{r, echo=TRUE, eval=FALSE}\n# if x is a factor it will produce a box plot\nplot(factor(mtcars$cyl), mtcars$mpg)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# if x is a factor it will produce a box plot\npar(bg = \"#fdfdfd\")\nplot(factor(mtcars$cyl), mtcars$mpg)\n```\n\n\n\nAlternatively, we can use the `boxplot()` function to create a box plot.  We can create a single box plot with the following:\n\n```{r, echo=TRUE, eval=FALSE}\n# boxplot of mpg\nboxplot(mtcars$mpg)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# boxplot of mpg\npar(bg = \"#fdfdfd\")\nboxplot(mtcars$mpg)\n```\n\nTo get a box plot that displays the distribution of mpg values across the different cylinders we use the \"~\" to state that we want to assess *y* by *x*:  \n\n```{r, echo=TRUE, eval=FALSE}\n# boxplot of mpg by cyl\nboxplot(mpg ~ cyl, data = mtcars)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# boxplot of mpg by cyl\npar(bg = \"#fdfdfd\")\nboxplot(mpg ~ cyl, data = mtcars)\n```\n\nWe can also assess interactions. In this case we look at the distribution of mpg by cylinders and transmission. Note on the y axis is mpg and on the x axis are the cylinder ~ transmission interaction. Note that the transmission variable is coded as 0 for automatic and 1 for manual. So the x-axis values of 4.0, 6.0, 8.0, 4.1, etc. represent 4 cylinder with automatic transmission, 6 cylinder with automatic transmission, 8 cylinder with automatic transmission, 4 cylinder with manual transmission, etc. \n\n```{r, echo=TRUE, eval=FALSE}\n# boxplot of mpg based on interaction of two variables\nboxplot(mpg ~ cyl + am, data = mtcars)\n```\n\n```{r, echo=FALSE, fig.align='center'}\n# boxplot of mpg based on interaction of two variables\npar(bg = \"#fdfdfd\")\nboxplot(mpg ~ cyl + am, data = mtcars)\n```\n\nSimilar results are attained with `qplot()` using `geom = \"boxplot\"`:\n\n```{r, echo=TRUE, fig.align='center'}\nqplot(x = factor(cyl), y = mpg, data = mtcars, geom = \"boxplot\")\n```\n\n<a href=\"#top\">Go to top</a>\n\n<br>\n\n## Stem & Leaf Plot {#stem}\nTo make a stem-and-leaf plot we can simply use the `stem()` function and pass it a vector of numeric values:\n\n```{r, echo=TRUE}\nstem(faithful$eruptions)\n```\n\n<a href=\"#top\">Go to top</a>\n\n",
    "created" : 1463407952382.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3369280487",
    "id" : "EA8086D4",
    "lastKnownWriteTime" : 1464264494,
    "last_content_update" : 1464264494117,
    "path" : "~/Desktop/Personal/Visualization/Quickplots.Rmd",
    "project_path" : "Quickplots.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}